{"ast":null,"code":"var _jsxFileName = \"/home/devu/projects/my-app/src/CustomObj.js\";\nimport React, { Component } from 'react';\nimport { storeProducts } from \"./data\";\nimport { isObject } from 'util';\nexport default class CustomObj extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      store: storeProducts.data,\n      tempObjData: ''\n    };\n  }\n\n  render() {\n    let store = this.state.store;\n    var tempObj = {};\n    Object.keys(store).forEach(function (k) {\n      var val = store[k];\n      var customer = val['customer_name'];\n      var month = val['month'];\n      var itemName = val['item_name'];\n      var salesPerson = val['salesperson_name'];\n      if (!tempObj[customer]) tempObj[customer] = {\n        'type': 'row',\n        'key': 'customer_name'\n      };\n      if (!tempObj[customer][month]) tempObj[customer][month] = {\n        'type': 'row',\n        'key': 'month'\n      };\n      if (!tempObj[customer][month][itemName]) tempObj[customer][month][itemName] = {\n        'type': 'column',\n        'key': 'item_name'\n      };\n      if (!tempObj[customer][month][itemName][salesPerson]) tempObj[customer][month][itemName][salesPerson] = {\n        'type': 'column',\n        'key': 'sales_person',\n        'data': {\n          'value': 0,\n          'qty': 0\n        }\n      };\n      tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n      tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n    }); // console.log(\"result :\", tempObj);\n    // var tempObjData = JSON.stringify(tempObj)\n    // const peopleArray = Object.values(tempObj)\n    // var dataArry = peopleArray.map((item, index) => {\n    //     return dataArry = item.map((i, j) => {\n    //         console.log(\"i\", i)\n    //     })\n    // })\n    // var result = Object.keys(obj).map(function(key) {\n    //     return [Number(key), obj[key]];\n    // });\n    // Start Recursion\n\n    let company = {\n      sales: [{\n        name: 'John',\n        salary: 1000\n      }, {\n        name: 'Alice',\n        salary: 600\n      }],\n      development: {\n        sites: [{\n          name: 'Peter',\n          salary: 2000\n        }, {\n          name: 'Alex',\n          salary: 1800\n        }],\n        internals: [{\n          name: 'Jack',\n          salary: 1300\n        }]\n      }\n    }; // The function to do the job\n\n    function sumSalaries(department) {\n      if (Array.isArray(department)) {\n        // case (1)\n        return department.reduce((prev, current) => prev + current.salary, 0); // sum the array\n      } else {\n        // case (2)\n        let sum = 0;\n\n        for (let subdep of Object.values(department)) {\n          sum += sumSalaries(subdep); // recursively call for subdepartments, sum the results\n        }\n\n        return sum;\n      }\n    } // console.log(sumSalaries(company)); // 6700\n    // Object.keys(tempObj).forEach(function (k) {\n    // console.log(tempObj[k])\n    // var values = tempObj[k]\n\n\n    var dataValue = '';\n    var dataQty = '';\n    var count = 0;\n\n    function pivotTablePlot(values) {\n      // console.log(\"start \",values);\n      Object.keys(values).forEach(function (k) {\n        var subObj = values[k]; // we will get new object from here\n\n        console.log(\"values[k] \", values[k]);\n\n        if (values[k] == \"row\") {\n          var row = this.refs.myTable.insertRow(0);\n          var cell1 = row.insertCell(0);\n          var cell2 = row.insertCell(1);\n        } // cell1.innerHTML = \"NEW CELL1\";\n        // cell2.innerHTML = \"NEW CELL2\";\n\n\n        console.log(\"k \", k);\n\n        if (values[k].value) {\n          //check if it is a \"data\" object which have to keys \"value\" and \"qty\" \n          dataValue = dataValue + \" + \" + values[k].value;\n          dataQty = dataQty + \" + \" + values[k].qty;\n        } else {\n          // loop through the object to skip 'type' and 'key' keys\n          Object.keys(subObj).forEach(function (itemKey, index) {\n            // console.log(\"type or key\", itemKey)\n            if (typeof subObj[itemKey] == 'object') {\n              console.log(\"subobject \", subObj[itemKey]);\n              pivotTablePlot(subObj[itemKey]); // recursively call   \n            }\n          });\n        }\n      });\n    }\n\n    pivotTablePlot(tempObj);\n    console.log(\"dataValue\", dataValue);\n    console.log(\"dataQty\", dataQty); // })\n    // End recursion \n\n    var customer_name = [];\n    var customer_data = [];\n    var row1 = [];\n    var row2 = [];\n    Object.entries(tempObj).forEach(function (k) {\n      var key = k; // console.log(\"k \", key)\n      // console.log(\"k \", k[1].type)\n\n      function pivotRows(key) {\n        var dataKey = key[1]; // console.log('datakey ',dataKey)\n\n        if (k[1].type !== \"row\") {\n          return console.log(key);\n        } else {\n          row1 += '<tr>' + key[0]; //         for (let rowsObj of Object.value(key)) {\n          //             sum += pivotRows(rowsObj); // recursively call for subdepartments, sum the results\n          //         }\n          // return sum;\n\n          var td = ''; // for(let isObjectt of Object.dataKey){\n          // if (typeof isObjectt !== \"undefined\") {\n          //     td+= \"<td>\"+pivotRows(key[1])+\"</td>\"\n          // }}\n\n          row1 += td + '</tr>';\n        }\n      }\n    });\n    var rows = {\n      'row1': {\n        'cp': {\n          2: '22',\n          '2': 'fff'\n        },\n        'cp2': {\n          'asd': 'sad'\n        }\n      },\n      'row2': {\n        'test': 'pop',\n        'test2': 1\n      }\n    };\n\n    function iterate(obj, stack) {\n      for (var property in obj) {\n        if (obj.hasOwnProperty(property)) {\n          if (typeof obj[property] == \"object\") {\n            iterate(obj[property], stack + '.' + property);\n          } else {// console.log(property + \"   \" + obj[property]);\n            // $('#output').append($(\"<div/>\").text(stack + '.' + roperty))\n          }\n        }\n      }\n    }\n\n    iterate(rows, ''); // Object.keys(rows).forEach(item => {\n    //     // console.log(rows[item]);\n    //     let r = rows[item]\n    //     // Object.entries(r).forEach(i =>{\n    //     //     console.log(i);\n    //     // })\n    // })\n    // console.log(customer_data)\n    // let customer = customer_name.map((item,index)=>{\n    //     return(\n    //         <tr>\n    //             <td>{item}</td>\n    //         </tr>\n    //     )\n    // })\n    // var customer_data_key = [];\n    // var customer_data_array = [];\n    // let customer_d = customer_data.map((item,index)=>{\n    //     return Object.keys(item).forEach(i=>{\n    //         console.log(i);\n    //         var key = i;\n    //         var value = item[i]\n    //         customer_data_key.push(key);\n    //         customer_data_array.push(value);\n    //         return(\n    //             <tr>\n    //                 <td>{i}</td>\n    //                 <td>{value}</td>\n    //             </tr>\n    //         )\n    //     })            \n    // })\n    // console.log(customer_data_key)\n    // console.log(customer_data_array)\n\n    return React.createElement(React.Fragment, null, React.createElement(\"table\", {\n      ref: \"myTable\",\n      border: \"1\",\n      cellPadding: \"10px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/devu/projects/my-app/src/CustomObj.js"],"names":["React","Component","storeProducts","isObject","CustomObj","constructor","props","state","store","data","tempObjData","render","tempObj","Object","keys","forEach","k","val","customer","month","itemName","salesPerson","company","sales","name","salary","development","sites","internals","sumSalaries","department","Array","isArray","reduce","prev","current","sum","subdep","values","dataValue","dataQty","count","pivotTablePlot","subObj","console","log","row","refs","myTable","insertRow","cell1","insertCell","cell2","value","qty","itemKey","index","customer_name","customer_data","row1","row2","entries","key","pivotRows","dataKey","type","td","rows","iterate","obj","stack","property","hasOwnProperty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { storeProducts } from \"./data\"\nimport { isObject } from 'util';\n\nexport default class CustomObj extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            store: storeProducts.data,\n            tempObjData: ''\n        }\n    }\n\n    render() {\n        let store = this.state.store;\n        var tempObj = {};\n\n        Object.keys(store).forEach(function (k) {\n            var val = store[k];\n            var customer = val['customer_name'];\n            var month = val['month'];\n            var itemName = val['item_name']\n            var salesPerson = val['salesperson_name']\n\n            if (!tempObj[customer])\n                tempObj[customer] = { 'type': 'row', 'key': 'customer_name' };\n\n            if (!tempObj[customer][month])\n                tempObj[customer][month] = { 'type': 'row', 'key': 'month' }\n\n            if (!tempObj[customer][month][itemName])\n                tempObj[customer][month][itemName] = { 'type': 'column', 'key': 'item_name' }\n\n            if (!tempObj[customer][month][itemName][salesPerson])\n                tempObj[customer][month][itemName][salesPerson] = { 'type': 'column', 'key': 'sales_person', 'data': { 'value': 0, 'qty': 0 } }\n\n            tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n            tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n\n        });\n\n        // console.log(\"result :\", tempObj);\n        // var tempObjData = JSON.stringify(tempObj)\n\n        // const peopleArray = Object.values(tempObj)\n        // var dataArry = peopleArray.map((item, index) => {\n        //     return dataArry = item.map((i, j) => {\n        //         console.log(\"i\", i)\n        //     })\n        // })\n\n        // var result = Object.keys(obj).map(function(key) {\n        //     return [Number(key), obj[key]];\n        // });\n\n        // Start Recursion\n        let company = {\n            sales: [{\n                name: 'John',\n                salary: 1000\n            }, {\n                name: 'Alice',\n                salary: 600\n            }],\n\n            development: {\n                sites: [{\n                    name: 'Peter',\n                    salary: 2000\n                }, {\n                    name: 'Alex',\n                    salary: 1800\n                }],\n\n                internals: [{\n                    name: 'Jack',\n                    salary: 1300\n                }]\n            }\n        };\n        // The function to do the job\n        function sumSalaries(department) {\n            if (Array.isArray(department)) { // case (1)\n                return department.reduce((prev, current) => prev + current.salary, 0); // sum the array\n            } else { // case (2)\n                let sum = 0;\n                for (let subdep of Object.values(department)) {\n                    sum += sumSalaries(subdep); // recursively call for subdepartments, sum the results\n                }\n                return sum;\n            }\n        }\n\n        // console.log(sumSalaries(company)); // 6700\n\n        // Object.keys(tempObj).forEach(function (k) {\n        // console.log(tempObj[k])\n        // var values = tempObj[k]\n        var dataValue = ''\n        var dataQty = ''\n        var count = 0\n        function pivotTablePlot(values) {\n            // console.log(\"start \",values);\n            Object.keys(values).forEach(function (k) {\n                var subObj = values[k] // we will get new object from here\n                console.log(\"values[k] \",values[k]);\n                if(values[k]==\"row\"){\n                    var row = this.refs.myTable.insertRow(0);\n                    var cell1 = row.insertCell(0);\n                    var cell2 = row.insertCell(1);\n                }\n                // cell1.innerHTML = \"NEW CELL1\";\n                // cell2.innerHTML = \"NEW CELL2\";\n                console.log(\"k \",k);\n                \n                if (values[k].value) {\n                    //check if it is a \"data\" object which have to keys \"value\" and \"qty\" \n                    dataValue = dataValue + \" + \" + values[k].value\n                    dataQty = dataQty + \" + \" + values[k].qty\n                }\n                else {  // loop through the object to skip 'type' and 'key' keys\n                    Object.keys(subObj).forEach(function (itemKey, index) {\n\n                        // console.log(\"type or key\", itemKey)\n                        if (typeof subObj[itemKey] == 'object') {\n                            console.log(\"subobject \", subObj[itemKey]);\n                            pivotTablePlot(subObj[itemKey]); // recursively call   \n                        }\n                    })\n                }\n            })\n        }\n        pivotTablePlot(tempObj);\n\n        console.log(\"dataValue\", dataValue);\n        console.log(\"dataQty\", dataQty);\n\n        // })\n        // End recursion \n        var customer_name = [];\n        var customer_data = [];\n        var row1 = []\n        var row2 = []\n        Object.entries(tempObj).forEach(function (k) {\n            var key = k;\n            // console.log(\"k \", key)\n            // console.log(\"k \", k[1].type)\n\n            function pivotRows(key) {\n                var dataKey = key[1]\n                // console.log('datakey ',dataKey)\n                if (k[1].type !== \"row\") {\n                    return console.log(key)\n                } else {\n                    row1 += '<tr>' + key[0]\n                    //         for (let rowsObj of Object.value(key)) {\n                    //             sum += pivotRows(rowsObj); // recursively call for subdepartments, sum the results\n                    //         }\n                    // return sum;\n                    var td = ''\n                    // for(let isObjectt of Object.dataKey){\n                    // if (typeof isObjectt !== \"undefined\") {\n                    //     td+= \"<td>\"+pivotRows(key[1])+\"</td>\"\n                    // }}\n                    row1 += td + '</tr>'\n                }\n            }\n\n            \n        })\n\n\n        var rows = {\n            'row1': {\n                'cp': { 2: '22', '2': 'fff' },\n                'cp2': { 'asd': 'sad' },\n            },\n            'row2': { 'test': 'pop', 'test2': 1 }\n        };\n\n\n        function iterate(obj, stack) {\n            for (var property in obj) {\n                if (obj.hasOwnProperty(property)) {\n                    if (typeof obj[property] == \"object\") {\n                        iterate(obj[property], stack + '.' + property);\n                    } else {\n                        // console.log(property + \"   \" + obj[property]);\n                        // $('#output').append($(\"<div/>\").text(stack + '.' + roperty))\n                    }\n                }\n            }\n        }\n\n        iterate(rows, '')\n        // Object.keys(rows).forEach(item => {\n        //     // console.log(rows[item]);\n        //     let r = rows[item]\n        //     // Object.entries(r).forEach(i =>{\n        //     //     console.log(i);\n        //     // })\n        // })\n\n        // console.log(customer_data)\n        // let customer = customer_name.map((item,index)=>{\n        //     return(\n        //         <tr>\n        //             <td>{item}</td>\n        //         </tr>\n        //     )\n        // })\n\n        // var customer_data_key = [];\n        // var customer_data_array = [];\n        // let customer_d = customer_data.map((item,index)=>{\n        //     return Object.keys(item).forEach(i=>{\n        //         console.log(i);\n        //         var key = i;\n        //         var value = item[i]\n        //         customer_data_key.push(key);\n        //         customer_data_array.push(value);\n        //         return(\n        //             <tr>\n        //                 <td>{i}</td>\n        //                 <td>{value}</td>\n        //             </tr>\n        //         )\n        //     })            \n        // })\n        // console.log(customer_data_key)\n        // console.log(customer_data_array)\n\n        return (\n            <>\n                {/* {row2} */}\n                {/* {row1} */}\n                <table ref='myTable' border=\"1\" cellPadding=\"10px\">\n                    \n                </table>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}