{"ast":null,"code":"var _jsxFileName = \"/home/devu/projects/my-app/src/CustomObjLast.jsx\";\nimport React, { Component } from 'react';\nimport { storeProducts } from \"./data\";\nimport { isObject } from 'util';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nexport default class CustomObjLast extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      store: storeProducts.data,\n      tempObjData: '',\n      title: ''\n    };\n    this.textInput = React.createRef();\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    let store = this.state.store;\n    var tempObj = {}; // document.write(store);\n\n    Object.keys(store).forEach(function (k) {\n      var val = store[k];\n      var customer = val['customer_name'];\n      var month = val['month'];\n      var itemName = val['item_name'];\n      var salesPerson = val['salesperson_name'];\n      if (!tempObj[customer]) tempObj[customer] = {\n        'type': 'row',\n        'key': 'customer_name'\n      };\n      if (!tempObj[customer][month]) tempObj[customer][month] = {\n        'type': 'row',\n        'key': 'month'\n      };\n      if (!tempObj[customer][month][itemName]) tempObj[customer][month][itemName] = {\n        'type': 'column',\n        'key': 'item_name'\n      };\n      if (!tempObj[customer][month][itemName][salesPerson]) tempObj[customer][month][itemName][salesPerson] = {\n        'type': 'column',\n        'key': 'sales_person',\n        'data': {\n          'value': 0,\n          'qty': 0\n        }\n      };\n      tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n      tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n    }); // console.log(\"result :\", tempObj);\n    // Start Recursion\n\n    var dataValue = '';\n    var dataQty = '';\n    var count = [];\n    var rowPush = [];\n\n    function pivotTablePlot(values) {\n      // console.log(\"start \",values);\n      Object.keys(values).forEach(function (k) {\n        var subObj = values[k]; // we will get new object from here\n        // console.log(\"values[k] \", values[k]);\n        // console.log(\"key \", k);\n\n        if (values[k] == \"month\") {} // create a new row\n        // for a customer display sales value and quantity for each month \n        // like aug, sept and so on  \n        // if (k !== \"type\" && k != \"key\" && k != \"data\") {\n        // // if (values[k] != \"type\" && values[k] != \"data\" && values[k] != \"row\" ) {\n\n\n        var v = k;\n\n        function hasNumber(v) {\n          // let n = /\\d/.test(v);\n          // console.log(\"n \", n);\n          return /\\d/.test(v);\n        }\n\n        function validate(v) {\n          var re = /^[A-Za-z]/;\n          if (re.test(v)) console.log('Valid Name.', v);else console.log('Invalid Name.', v);\n        }\n\n        validate(v);\n\n        if (values[k] == \"row\") {\n          rowPush.push(React.createElement(\"tr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            rowSpan: \"2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, k)));\n        }\n\n        var subTempObj = values[k];\n        var size = Object.keys(subTempObj).length;\n\n        if (values[k].value) {\n          count.push(1);\n          rowPush.push(React.createElement(React.Fragment, null, values[k].value != '' && React.createElement(React.Fragment, null, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, \" \", values[k].value), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, \" \", values[k].qty))));\n        } else {\n          // loop through the object to skip 'type' and 'key' keys\n          Object.keys(subObj).forEach(function (itemKey, index) {\n            if (typeof subObj[itemKey] == 'object') {\n              // console.log(\"subobject \", subObj[itemKey]);\n              pivotTablePlot(subObj[itemKey]); // recursively call   \n            }\n          });\n        }\n      });\n    }\n\n    pivotTablePlot(tempObj);\n    let head = count.map((item, index) => {\n      return React.createElement(React.Fragment, null, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Value\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Quantity\"));\n    });\n    return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"row push\"), React.createElement(\"table\", {\n      border: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Customer\"), head)), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, rowPush)));\n  }\n\n}","map":{"version":3,"sources":["/home/devu/projects/my-app/src/CustomObjLast.jsx"],"names":["React","Component","storeProducts","isObject","BootstrapTable","TableHeaderColumn","CustomObjLast","constructor","props","state","store","data","tempObjData","title","textInput","createRef","myRef","render","tempObj","Object","keys","forEach","k","val","customer","month","itemName","salesPerson","dataValue","dataQty","count","rowPush","pivotTablePlot","values","subObj","v","hasNumber","test","validate","re","console","log","push","subTempObj","size","length","value","qty","itemKey","index","head","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { storeProducts } from \"./data\"\nimport { isObject } from 'util';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\n\nexport default class CustomObjLast extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            store: storeProducts.data,\n            tempObjData: '',\n            title: ''\n        }\n\n        this.textInput = React.createRef();\n        this.myRef = React.createRef();\n    }\n\n    render() {\n        let store = this.state.store;\n        var tempObj = {};\n        // document.write(store);\n\n        Object.keys(store).forEach(function (k) {\n            var val = store[k];\n            var customer = val['customer_name'];\n            var month = val['month'];\n            var itemName = val['item_name']\n            var salesPerson = val['salesperson_name']\n\n            if (!tempObj[customer])\n                tempObj[customer] = { 'type': 'row', 'key': 'customer_name' };\n\n            if (!tempObj[customer][month])\n                tempObj[customer][month] = { 'type': 'row', 'key': 'month' }\n\n            if (!tempObj[customer][month][itemName])\n                tempObj[customer][month][itemName] = { 'type': 'column', 'key': 'item_name' }\n\n            if (!tempObj[customer][month][itemName][salesPerson])\n                tempObj[customer][month][itemName][salesPerson] = { 'type': 'column', 'key': 'sales_person', 'data': { 'value': 0, 'qty': 0 } }\n\n            tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n            tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n\n        });\n\n        // console.log(\"result :\", tempObj);\n        // Start Recursion\n\n        var dataValue = ''\n        var dataQty = ''\n        var count = []\n        var rowPush = []\n        function pivotTablePlot(values) {\n            // console.log(\"start \",values);\n            Object.keys(values).forEach(function (k) {\n                var subObj = values[k] // we will get new object from here\n                // console.log(\"values[k] \", values[k]);\n                // console.log(\"key \", k);\n                if (values[k] == \"month\") {\n                    // create a new row\n                    // for a customer display sales value and quantity for each month \n                    // like aug, sept and so on  \n                }\n                // if (k !== \"type\" && k != \"key\" && k != \"data\") {\n                // // if (values[k] != \"type\" && values[k] != \"data\" && values[k] != \"row\" ) {\n                var v = k\n                function hasNumber(v) {\n                    // let n = /\\d/.test(v);\n                    // console.log(\"n \", n);\n                    return /\\d/.test(v);\n                }\n                function validate(v) {\n                    var re = /^[A-Za-z]/;\n                    if (re.test(v))\n                        console.log('Valid Name.', v);\n                    else\n                        console.log('Invalid Name.', v);\n                }\n                validate(v);\n\n                if (values[k] == \"row\") {\n                    rowPush.push(\n                        <tr>\n                            <td rowSpan=\"2\">{k}</td>\n                            {/* <td rowSpan=\"2\">{values[k]}</td> */}\n                        </tr>\n                    );\n\n                }\n                var subTempObj = values[k]\n                var size = Object.keys(subTempObj).length\n\n                if (values[k].value) {\n                    count.push(1)\n                    rowPush.push(\n                        <>\n                            {values[k].value != '' &&\n                                <>\n                                    <td> {values[k].value}</td>\n                                    <td> {values[k].qty}</td>\n                                </>\n                            }\n                        </>\n                    )\n                }\n\n                else {  // loop through the object to skip 'type' and 'key' keys\n                    Object.keys(subObj).forEach(function (itemKey, index) {\n                        if (typeof subObj[itemKey] == 'object') {\n                            // console.log(\"subobject \", subObj[itemKey]);\n                            pivotTablePlot(subObj[itemKey]); // recursively call   \n                        }\n                    })\n                }\n            })\n        }\n        pivotTablePlot(tempObj);\n\n        let head = count.map((item, index) => {\n            return (\n                <>\n                    <th>Value</th>\n                    <th>Quantity</th>\n                </>\n            )\n        })\n\n        return (\n            <>\n                {/* <h4>{this.state.title}--dsdsds</h4> */}\n                <p>\n                    row push\n                </p>\n                <table border=\"1\">\n\n                    {/* start */}\n                    <thead>\n                        <tr >\n                            <th>Customer</th>\n                            {/* <th>Value</th>\n                            <th>Quantity</th> */}\n                            {head}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {/* <tr>\n                                <td rowSpan=\"2\">Customer name</td>\n                                <td colSpan=\"2\">Month</td>\n                            </tr>\n                            <tr>\n                                <td>Value</td>\n                                <td rowSpan=\"2\">qty</td>\n                            </tr> */}\n                        {/* <tr> */}\n                        {rowPush}\n                        {/* </tr> */}\n                    </tbody>\n                </table>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}