{"ast":null,"code":"var _jsxFileName = \"/home/devu/projects/my-app/src/CustomObj.js\";\nimport React, { Component } from 'react';\nimport { storeProducts } from \"./data\";\nimport { isObject } from 'util';\nexport default class CustomObj extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      store: storeProducts.data,\n      tempObjData: ''\n    };\n    this.textInput = React.createRef();\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    let store = this.state.store;\n    var tempObj = {};\n    document.write(store);\n    Object.keys(store).forEach(function (k) {\n      var val = store[k];\n      var customer = val['customer_name'];\n      var month = val['month'];\n      var itemName = val['item_name'];\n      var salesPerson = val['salesperson_name'];\n      if (!tempObj[customer]) tempObj[customer] = {\n        'type': 'row',\n        'key': 'customer_name'\n      };\n      if (!tempObj[customer][month]) tempObj[customer][month] = {\n        'type': 'row',\n        'key': 'month'\n      };\n      if (!tempObj[customer][month][itemName]) tempObj[customer][month][itemName] = {\n        'type': 'column',\n        'key': 'item_name'\n      };\n      if (!tempObj[customer][month][itemName][salesPerson]) tempObj[customer][month][itemName][salesPerson] = {\n        'type': 'column',\n        'key': 'sales_person',\n        'data': {\n          'value': 0,\n          'qty': 0\n        }\n      };\n      tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n      tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n    });\n    console.log(\"result :\", tempObj); // var tempObjData = JSON.stringify(tempObj)\n    // const peopleArray = Object.values(tempObj)\n    // var dataArry = peopleArray.map((item, index) => {\n    //     return dataArry = item.map((i, j) => {\n    //         console.log(\"i\", i)\n    //     })\n    // })\n    // var result = Object.keys(obj).map(function(key) {\n    //     return [Number(key), obj[key]];\n    // });\n    // Start Recursion\n\n    let company = {\n      sales: [{\n        name: 'John',\n        salary: 1000\n      }, {\n        name: 'Alice',\n        salary: 600\n      }],\n      development: {\n        sites: [{\n          name: 'Peter',\n          salary: 2000\n        }, {\n          name: 'Alex',\n          salary: 1800\n        }],\n        internals: [{\n          name: 'Jack',\n          salary: 1300\n        }]\n      }\n    };\n    var dataValue = '';\n    var dataQty = '';\n    var count = 0;\n\n    function pivotTablePlot(values) {\n      // console.log(\"start \",values);\n      Object.keys(values).forEach(function (k) {\n        var subObj = values[k]; // we will get new object from here\n\n        console.log(\"values[k] \", values[k]);\n\n        if (values[k] == \"row\") {\n          let row = this.myRef.insertRow(0);\n          let cell1 = row.insertCell(0);\n          let cell2 = row.insertCell(1);\n        } // cell1.innerHTML = \"NEW CELL1\";\n        // cell2.innerHTML = \"NEW CELL2\";\n\n\n        console.log(\"k \", k);\n\n        if (values[k].value) {\n          //check if it is a \"data\" object which have to keys \"value\" and \"qty\" \n          dataValue = dataValue + \" + \" + values[k].value;\n          dataQty = dataQty + \" + \" + values[k].qty;\n        } else {\n          // loop through the object to skip 'type' and 'key' keys\n          Object.keys(subObj).forEach(function (itemKey, index) {\n            // console.log(\"type or key\", itemKey)\n            if (typeof subObj[itemKey] == 'object') {\n              console.log(\"subobject \", subObj[itemKey]);\n              pivotTablePlot(subObj[itemKey]); // recursively call   \n            }\n          });\n        }\n      });\n    }\n\n    pivotTablePlot(tempObj);\n    console.log(\"dataValue\", dataValue);\n    console.log(\"dataQty\", dataQty); // })\n    // End recursion \n\n    var rows = {\n      'row1': {\n        'cp': {\n          2: '22',\n          '2': 'fff'\n        },\n        'cp2': {\n          'asd': 'sad'\n        }\n      },\n      'row2': {\n        'test': 'pop',\n        'test2': 1\n      }\n    };\n\n    function iterate(obj, stack) {\n      for (var property in obj) {\n        if (obj.hasOwnProperty(property)) {\n          if (typeof obj[property] == \"object\") {\n            iterate(obj[property], stack + '.' + property);\n          } else {// console.log(property + \"   \" + obj[property]);\n            // $('#output').append($(\"<div/>\").text(stack + '.' + roperty))\n          }\n        }\n      }\n    }\n\n    iterate(rows, '');\n    return React.createElement(React.Fragment, null, React.createElement(BootstrapTable, {\n      data: storeProducts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(TableHeaderColumn, {\n      row: \"0\",\n      rowSpan: \"2\",\n      dataField: \"customer_name\",\n      isKey: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Customer\"), React.createElement(TableHeaderColumn, {\n      row: \"0\",\n      colSpan: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Month\"), React.createElement(TableHeaderColumn, {\n      row: \"1\",\n      dataField: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Name\"), React.createElement(TableHeaderColumn, {\n      row: \"1\",\n      dataField: \"price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Price\")));\n  }\n\n}","map":{"version":3,"sources":["/home/devu/projects/my-app/src/CustomObj.js"],"names":["React","Component","storeProducts","isObject","CustomObj","constructor","props","state","store","data","tempObjData","textInput","createRef","myRef","render","tempObj","document","write","Object","keys","forEach","k","val","customer","month","itemName","salesPerson","console","log","company","sales","name","salary","development","sites","internals","dataValue","dataQty","count","pivotTablePlot","values","subObj","row","insertRow","cell1","insertCell","cell2","value","qty","itemKey","index","rows","iterate","obj","stack","property","hasOwnProperty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { storeProducts } from \"./data\"\nimport { isObject } from 'util';\n\nexport default class CustomObj extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            store: storeProducts.data,\n            tempObjData: ''\n        }\n\n        this.textInput = React.createRef();\n        this.myRef = React.createRef();\n    }\n\n    render() {\n        let store = this.state.store;\n        var tempObj = {};\n        document.write(store);\n        Object.keys(store).forEach(function (k) {\n            var val = store[k];\n            var customer = val['customer_name'];\n            var month = val['month'];\n            var itemName = val['item_name']\n            var salesPerson = val['salesperson_name']\n\n            if (!tempObj[customer])\n                tempObj[customer] = { 'type': 'row', 'key': 'customer_name' };\n\n            if (!tempObj[customer][month])\n                tempObj[customer][month] = { 'type': 'row', 'key': 'month' }\n\n            if (!tempObj[customer][month][itemName])\n                tempObj[customer][month][itemName] = { 'type': 'column', 'key': 'item_name' }\n\n            if (!tempObj[customer][month][itemName][salesPerson])\n                tempObj[customer][month][itemName][salesPerson] = { 'type': 'column', 'key': 'sales_person', 'data': { 'value': 0, 'qty': 0 } }\n\n            tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n            tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n\n        });\n\n        console.log(\"result :\", tempObj);\n        // var tempObjData = JSON.stringify(tempObj)\n\n        // const peopleArray = Object.values(tempObj)\n        // var dataArry = peopleArray.map((item, index) => {\n        //     return dataArry = item.map((i, j) => {\n        //         console.log(\"i\", i)\n        //     })\n        // })\n\n        // var result = Object.keys(obj).map(function(key) {\n        //     return [Number(key), obj[key]];\n        // });\n\n        // Start Recursion\n        let company = {\n            sales: [{\n                name: 'John',\n                salary: 1000\n            }, {\n                name: 'Alice',\n                salary: 600\n            }],\n\n            development: {\n                sites: [{\n                    name: 'Peter',\n                    salary: 2000\n                }, {\n                    name: 'Alex',\n                    salary: 1800\n                }],\n\n                internals: [{\n                    name: 'Jack',\n                    salary: 1300\n                }]\n            }\n        };\n\n        var dataValue = ''\n        var dataQty = ''\n        var count = 0\n        function pivotTablePlot(values) {\n            // console.log(\"start \",values);\n            Object.keys(values).forEach(function (k) {\n                var subObj = values[k] // we will get new object from here\n                console.log(\"values[k] \", values[k]);\n                if (values[k] == \"row\") {\n                    let row = this.myRef.insertRow(0);\n                    let cell1 = row.insertCell(0);\n                    let cell2 = row.insertCell(1);\n                }\n                // cell1.innerHTML = \"NEW CELL1\";\n                // cell2.innerHTML = \"NEW CELL2\";\n                console.log(\"k \", k);\n\n                if (values[k].value) {\n                    //check if it is a \"data\" object which have to keys \"value\" and \"qty\" \n                    dataValue = dataValue + \" + \" + values[k].value\n                    dataQty = dataQty + \" + \" + values[k].qty\n                }\n                else {  // loop through the object to skip 'type' and 'key' keys\n                    Object.keys(subObj).forEach(function (itemKey, index) {\n\n                        // console.log(\"type or key\", itemKey)\n                        if (typeof subObj[itemKey] == 'object') {\n                            console.log(\"subobject \", subObj[itemKey]);\n                            pivotTablePlot(subObj[itemKey]); // recursively call   \n                        }\n                    })\n                }\n            })\n        }\n        pivotTablePlot(tempObj);\n\n        console.log(\"dataValue\", dataValue);\n        console.log(\"dataQty\", dataQty);\n\n        // })\n        // End recursion \n\n        var rows = {\n            'row1': {\n                'cp': { 2: '22', '2': 'fff' },\n                'cp2': { 'asd': 'sad' },\n            },\n            'row2': { 'test': 'pop', 'test2': 1 }\n        };\n\n\n        function iterate(obj, stack) {\n            for (var property in obj) {\n                if (obj.hasOwnProperty(property)) {\n                    if (typeof obj[property] == \"object\") {\n                        iterate(obj[property], stack + '.' + property);\n                    } else {\n                        // console.log(property + \"   \" + obj[property]);\n                        // $('#output').append($(\"<div/>\").text(stack + '.' + roperty))\n                    }\n                }\n            }\n        }\n\n        iterate(rows, '')\n\n        return (\n            <>\n                {/* {row2} */}\n                {/* {row1} */}\n                {/* <table ref={this.myRef} border=\"1\" cellPadding=\"10px\">\n\n                </table> */}\n\n                <BootstrapTable data={storeProducts}>\n                    <TableHeaderColumn row='0' rowSpan='2' dataField='customer_name' isKey={true} >Customer</TableHeaderColumn>\n                    <TableHeaderColumn row='0' colSpan='2'>Month</TableHeaderColumn>\n                    <TableHeaderColumn row='1' dataField='name'>Name</TableHeaderColumn>\n                    <TableHeaderColumn row='1' dataField='price'>Price</TableHeaderColumn>\n                </BootstrapTable>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}