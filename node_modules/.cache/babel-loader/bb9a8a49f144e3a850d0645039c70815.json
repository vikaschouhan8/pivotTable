{"ast":null,"code":"var _jsxFileName = \"/home/devu/projects/my-app/src/CustomObj.js\";\nimport React, { Component } from 'react';\nimport { storeProducts } from \"./data\";\nimport { isObject } from 'util';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nexport default class CustomObj extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      store: storeProducts.data,\n      tempObjData: ''\n    };\n    this.textInput = React.createRef();\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    let store = this.state.store;\n    var tempObj = {}; // document.write(store);\n\n    Object.keys(store).forEach(function (k) {\n      var val = store[k];\n      var customer = val['customer_name'];\n      var month = val['month'];\n      var itemName = val['item_name'];\n      var salesPerson = val['salesperson_name'];\n      if (!tempObj[customer]) tempObj[customer] = {\n        'type': 'row',\n        'key': 'customer_name'\n      };\n      if (!tempObj[customer][month]) tempObj[customer][month] = {\n        'type': 'row',\n        'key': 'month'\n      };\n      if (!tempObj[customer][month][itemName]) tempObj[customer][month][itemName] = {\n        'type': 'column',\n        'key': 'item_name'\n      };\n      if (!tempObj[customer][month][itemName][salesPerson]) tempObj[customer][month][itemName][salesPerson] = {\n        'type': 'column',\n        'key': 'sales_person',\n        'data': {\n          'value': 0,\n          'qty': 0\n        }\n      };\n      tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n      tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n    }); // console.log(\"result :\", tempObj);\n    // Start Recursion\n\n    var dataValue = '';\n    var dataQty = '';\n    var count = 0;\n    var p = '';\n    var rowPush = [];\n\n    function pivotTablePlot(values) {\n      // console.log(\"start \",values);\n      Object.keys(values).forEach(function (k) {\n        var subObj = values[k]; // we will get new object from here\n\n        console.log(\"values[k] \", values[k]);\n        console.log(\"key \", k);\n\n        if (k !== \"type\" && k != \"key\" && k != \"data\") {\n          console.log(\"k\", k);\n          rowPush.push(React.createElement(React.Fragment, null, React.createElement(\"tr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          })));\n        }\n\n        if (values[k].value) {\n          rowPush.push(React.createElement(React.Fragment, null, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, \"Month\"), React.createElement(\"td\", {\n            colSpan: \"2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, \" \", values[k].value), React.createElement(\"td\", {\n            colSpan: \"2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, \" \", values[k].qty)));\n          values[k].value = '';\n        } else {\n          // loop through the object to skip 'type' and 'key' keys\n          Object.keys(subObj).forEach(function (itemKey, index) {\n            if (typeof subObj[itemKey] == 'object') {\n              console.log(\"subobject \", subObj[itemKey]);\n              pivotTablePlot(subObj[itemKey]); // recursively call   \n            }\n          });\n        }\n      });\n    }\n\n    pivotTablePlot(tempObj);\n    console.log(\"dataValue\", dataValue);\n    console.log(\"dataQty\", dataQty); // })\n    // End recursion \n\n    var rows = {\n      'row1': {\n        'cp': {\n          2: '22',\n          '2': 'fff'\n        },\n        'cp2': {\n          'asd': 'sad'\n        }\n      },\n      'row2': {\n        'test': 'pop',\n        'test2': 1\n      }\n    };\n\n    function iterate(obj, stack) {\n      for (var property in obj) {\n        if (obj.hasOwnProperty(property)) {\n          if (typeof obj[property] == \"object\") {\n            iterate(obj[property], stack + '.' + property);\n          } else {// console.log(property + \"   \" + obj[property]);\n            // $('#output').append($(\"<div/>\").text(stack + '.' + roperty))\n          }\n        }\n      }\n    }\n\n    iterate(rows, '');\n    return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"row push\"), React.createElement(\"table\", {\n      border: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Value\"), React.createElement(\"th\", {\n      colSpan: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Qty\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, rowPush))));\n  }\n\n}","map":{"version":3,"sources":["/home/devu/projects/my-app/src/CustomObj.js"],"names":["React","Component","storeProducts","isObject","BootstrapTable","TableHeaderColumn","CustomObj","constructor","props","state","store","data","tempObjData","textInput","createRef","myRef","render","tempObj","Object","keys","forEach","k","val","customer","month","itemName","salesPerson","dataValue","dataQty","count","p","rowPush","pivotTablePlot","values","subObj","console","log","push","value","qty","itemKey","index","rows","iterate","obj","stack","property","hasOwnProperty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { storeProducts } from \"./data\"\nimport { isObject } from 'util';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\n\nexport default class CustomObj extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            store: storeProducts.data,\n            tempObjData: ''\n        }\n\n        this.textInput = React.createRef();\n        this.myRef = React.createRef();\n    }\n\n    render() {\n        let store = this.state.store;\n        var tempObj = {};\n        // document.write(store);\n\n        Object.keys(store).forEach(function (k) {\n            var val = store[k];\n            var customer = val['customer_name'];\n            var month = val['month'];\n            var itemName = val['item_name']\n            var salesPerson = val['salesperson_name']\n\n            if (!tempObj[customer])\n                tempObj[customer] = { 'type': 'row', 'key': 'customer_name' };\n\n            if (!tempObj[customer][month])\n                tempObj[customer][month] = { 'type': 'row', 'key': 'month' }\n\n            if (!tempObj[customer][month][itemName])\n                tempObj[customer][month][itemName] = { 'type': 'column', 'key': 'item_name' }\n\n            if (!tempObj[customer][month][itemName][salesPerson])\n                tempObj[customer][month][itemName][salesPerson] = { 'type': 'column', 'key': 'sales_person', 'data': { 'value': 0, 'qty': 0 } }\n\n            tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n            tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n\n        });\n\n        // console.log(\"result :\", tempObj);\n        // Start Recursion\n\n        var dataValue = ''\n        var dataQty = ''\n        var count = 0\n        var p = ''\n        var rowPush = []\n        function pivotTablePlot(values) {\n            // console.log(\"start \",values);\n            Object.keys(values).forEach(function (k) {\n                var subObj = values[k] // we will get new object from here\n                console.log(\"values[k] \", values[k]);\n                console.log(\"key \", k);\n\n                if (k !== \"type\" && k != \"key\" && k != \"data\") {\n                    console.log(\"k\", k)\n                    rowPush.push(\n                        <>\n                            <tr>\n                                {/* <td colSpan=\"3\">{k}</td> */}\n                                {/* <td rowSpan=\"2\"></td> */}\n                            </tr>\n                        </>\n                    )\n                }\n                if (values[k].value) {\n\n                    rowPush.push(\n                        <>\n                            {/* <tr> */}\n                            <td>Month</td>\n                            <td colSpan=\"2\"> {values[k].value}</td>\n                            <td colSpan=\"2\"> {values[k].qty}</td>\n                            {/* </tr> */}\n                        </>\n                    )\n                    values[k].value = ''\n                }\n\n                else {  // loop through the object to skip 'type' and 'key' keys\n                    Object.keys(subObj).forEach(function (itemKey, index) {\n                        if (typeof subObj[itemKey] == 'object') {\n                            console.log(\"subobject \", subObj[itemKey]);\n                            pivotTablePlot(subObj[itemKey]); // recursively call   \n                        }\n                    })\n                }\n            })\n        }\n        pivotTablePlot(tempObj);\n\n        console.log(\"dataValue\", dataValue);\n        console.log(\"dataQty\", dataQty);\n\n        // })\n        // End recursion \n\n        var rows = {\n            'row1': {\n                'cp': { 2: '22', '2': 'fff' },\n                'cp2': { 'asd': 'sad' },\n            },\n            'row2': { 'test': 'pop', 'test2': 1 }\n        };\n\n\n        function iterate(obj, stack) {\n            for (var property in obj) {\n                if (obj.hasOwnProperty(property)) {\n                    if (typeof obj[property] == \"object\") {\n                        iterate(obj[property], stack + '.' + property);\n                    } else {\n                        // console.log(property + \"   \" + obj[property]);\n                        // $('#output').append($(\"<div/>\").text(stack + '.' + roperty))\n                    }\n                }\n            }\n        }\n\n        iterate(rows, '')\n\n        return (\n            <>\n                <p>\n                    row push\n                </p>\n                <table border=\"1\">\n\n                    {/* start */}\n                    <thead>\n                        <tr >\n                            <th>Value</th>\n                            <th colSpan=\"2\">Qty</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {/* <tr>\n                                <td rowSpan=\"2\">Customer name</td>\n                                <td colSpan=\"2\">Month</td>\n                            </tr>\n                            <tr>\n                                <td>Value</td>\n                                <td rowSpan=\"2\">qty</td>\n                            </tr> */}\n                        <tr>\n                            {rowPush}\n                        </tr>\n                    </tbody>\n\n                    {/* end */}\n\n\n\n\n                    {/* <tr>Month</tr>\n                    <tr>\n                        <td>Value</td>\n                        <td>Qty</td>\n                    </tr> */}\n                    {/* <tr> */}\n                    {/* {rowPush} */}\n                    {/* </tr> */}\n                </table>\n                {}\n                {/* {row2} */}\n                {/* {row1} */}\n                {/* <table ref={this.myRef} border=\"1\" cellPadding=\"10px\">\n\n                </table> */}\n\n                {/* {p} */}\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}