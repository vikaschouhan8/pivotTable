{"ast":null,"code":"var _jsxFileName = \"/home/devu/projects/my-app/src/CustomObj.js\";\nimport React, { Component } from 'react';\nimport { storeProducts } from \"./data\";\nimport { isObject } from 'util';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nexport default class CustomObjLast extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      store: storeProducts.data,\n      tempObjData: '',\n      title: ''\n    };\n    this.textInput = React.createRef();\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    let store = this.state.store;\n    var tempObj = {}; // document.write(store);\n\n    Object.keys(store).forEach(function (k) {\n      var val = store[k];\n      var customer = val['customer_name'];\n      var month = val['month'];\n      var itemName = val['item_name'];\n      var salesPerson = val['salesperson_name'];\n      if (!tempObj[customer]) tempObj[customer] = {\n        'type': 'row',\n        'key': 'customer_name'\n      };\n      if (!tempObj[customer][month]) tempObj[customer][month] = {\n        'type': 'row',\n        'key': 'month'\n      };\n      if (!tempObj[customer][month][itemName]) tempObj[customer][month][itemName] = {\n        'type': 'column',\n        'key': 'item_name'\n      };\n      if (!tempObj[customer][month][itemName][salesPerson]) tempObj[customer][month][itemName][salesPerson] = {\n        'type': 'column',\n        'key': 'sales_person',\n        'data': {\n          'value': 0,\n          'qty': 0\n        }\n      };\n      tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n      tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n    }); // console.log(\"result :\", tempObj);\n    // Start Recursion\n\n    var dataValue = '';\n    var dataQty = '';\n    var count = [];\n    var rowPush = [];\n\n    function pivotTablePlot(values) {\n      // console.log(\"start \",values);\n      Object.keys(values).forEach(function (k) {\n        var subObj = values[k]; // we will get new object from here\n        // console.log(\"find month name \", values[k]);\n        // console.log(\"key \", k);\n\n        if (values[k] == \"month\") {} // create a new row\n        // for a customer display sales value and quantity for each month \n        // like aug, sept and so on  \n        // function to filter Cunstomer name only \n\n\n        var arr = [\"Aug\", \"Sept\", \"Oct\", \"Dec\", \"Jan\", \"Feb\"];\n        var monthsArr = arr.map(i => {\n          return React.createElement(\"td\", {\n            key: i,\n            colSpan: \"2\",\n            style: {\n              textAlign: \"left\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, i);\n        });\n        let valQty = arr.map(i => {\n          return React.createElement(React.Fragment, null, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, \"Value\"), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }, \"Quantity\"));\n        });\n\n        function customerNameOnly(v, mo) {\n          console.log(\"c n o\", values[v]);\n          var re = /^[A-Z ,]*$/;\n\n          if (re.test(v)) {\n            // console.log(\"yes it's a customer v \", v);\n            rowPush.push(React.createElement(React.Fragment, null, React.createElement(\"tr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 89\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              rowSpan: \"3\",\n              style: {\n                border: \"1px solid black\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90\n              },\n              __self: this\n            }, k), monthsArr), React.createElement(\"tr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 93\n              },\n              __self: this\n            }, valQty)));\n          } else {// console.log(\"Not our  customer \", v)\n          }\n        } // customerNameOnly(k, monthsArr);\n\n\n        if (values[k] == \"row\") {// rowPush.push(\n          //     <tr>\n          //         <td rowSpan=\"2\">{k}</td>\n          //         {/* <td rowSpan=\"2\">{values[k]}</td> */}\n          //     </tr>\n          // );\n        }\n\n        var subTempObj = values[k];\n        var size = Object.keys(subTempObj).length;\n\n        if (values[k].value) {\n          count.push(1);\n          rowPush.push(React.createElement(React.Fragment, null, values[k].value != '' && React.createElement(React.Fragment, null, React.createElement(\"td\", {\n            style: {\n              border: \"1px solid black\",\n              padding: \"10px\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, \" \", values[k].value), React.createElement(\"td\", {\n            style: {\n              border: \"1px solid black\",\n              padding: \"10px\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, \" \", values[k].qty))));\n        } else {\n          // loop through the object to skip 'type' and 'key' keys\n          Object.keys(subObj).forEach(function (itemKey, index) {\n            if (typeof subObj[itemKey] == 'object') {\n              // console.log(\"subobject \", subObj[itemKey]);\n              pivotTablePlot(subObj[itemKey]); // recursively call   \n            }\n          });\n        }\n\n        console.log(\"count \", count);\n      });\n    }\n\n    pivotTablePlot(tempObj);\n    let head = count.map((item, index) => {\n      return React.createElement(React.Fragment, null, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Value\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Quantity\"));\n    });\n    return React.createElement(React.Fragment, null, \"  \", React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Mission Pivot f table\"), React.createElement(\"table\", {\n      border: \"1\",\n      style: {\n        borderCollapse: \"collapse\",\n        border: \"1px solid black\",\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      style: {\n        border: \"1px solid black\",\n        height: \"50px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Customer\"), head)), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, rowPush)));\n  }\n\n}","map":{"version":3,"sources":["/home/devu/projects/my-app/src/CustomObj.js"],"names":["React","Component","storeProducts","isObject","BootstrapTable","TableHeaderColumn","CustomObjLast","constructor","props","state","store","data","tempObjData","title","textInput","createRef","myRef","render","tempObj","Object","keys","forEach","k","val","customer","month","itemName","salesPerson","dataValue","dataQty","count","rowPush","pivotTablePlot","values","subObj","arr","monthsArr","map","i","textAlign","valQty","customerNameOnly","v","mo","console","log","re","test","push","border","subTempObj","size","length","value","padding","qty","itemKey","index","head","item","borderCollapse","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { storeProducts } from \"./data\"\nimport { isObject } from 'util';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\n\nexport default class CustomObjLast extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            store: storeProducts.data,\n            tempObjData: '',\n            title: ''\n        }\n\n        this.textInput = React.createRef();\n        this.myRef = React.createRef();\n    }\n\n    render() {\n        let store = this.state.store;\n        var tempObj = {};\n        // document.write(store);\n\n        Object.keys(store).forEach(function (k) {\n            var val = store[k];\n            var customer = val['customer_name'];\n            var month = val['month'];\n            var itemName = val['item_name']\n            var salesPerson = val['salesperson_name']\n\n            if (!tempObj[customer])\n                tempObj[customer] = { 'type': 'row', 'key': 'customer_name' };\n\n            if (!tempObj[customer][month])\n                tempObj[customer][month] = { 'type': 'row', 'key': 'month' }\n\n            if (!tempObj[customer][month][itemName])\n                tempObj[customer][month][itemName] = { 'type': 'column', 'key': 'item_name' }\n\n            if (!tempObj[customer][month][itemName][salesPerson])\n                tempObj[customer][month][itemName][salesPerson] = { 'type': 'column', 'key': 'sales_person', 'data': { 'value': 0, 'qty': 0 } }\n\n            tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n            tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n\n        });\n\n        // console.log(\"result :\", tempObj);\n        // Start Recursion\n\n        var dataValue = ''\n        var dataQty = ''\n        var count = []\n        var rowPush = []\n        function pivotTablePlot(values) {\n            // console.log(\"start \",values);\n            Object.keys(values).forEach(function (k) {\n                var subObj = values[k] // we will get new object from here\n                // console.log(\"find month name \", values[k]);\n                // console.log(\"key \", k);\n                if (values[k] == \"month\") {\n                    // create a new row\n                    // for a customer display sales value and quantity for each month \n                    // like aug, sept and so on  \n                }\n                // function to filter Cunstomer name only \n                var arr = [\"Aug\", \"Sept\", \"Oct\", \"Dec\", \"Jan\", \"Feb\"]\n                var monthsArr = arr.map(i => {\n                    return (\n                        <td key={i} colSpan=\"2\" style={{ textAlign: \"left\" }}>{i}</td>\n                    )\n                })\n                let valQty = arr.map(i => {\n                    return (\n                        <>\n                            <td>Value</td>\n                            <td>Quantity</td>\n                        </>\n                    )\n                })\n                function customerNameOnly(v, mo) {\n                    console.log(\"c n o\", values[v]);\n                    var re = /^[A-Z ,]*$/;\n                    if (re.test(v)) {\n                        // console.log(\"yes it's a customer v \", v);\n                        rowPush.push(\n                            <>\n                                <tr>\n                                    <td rowSpan=\"3\" style={{ border: \"1px solid black\" }}>{k}</td>\n                                    {monthsArr}\n                                </tr>\n                                <tr>\n                                    {valQty}\n                                </tr>\n                            </>\n                        )\n                    }\n                    else {\n                        // console.log(\"Not our  customer \", v)\n                    }\n                }\n                // customerNameOnly(k, monthsArr);\n\n                if (values[k] == \"row\") {\n                    // rowPush.push(\n                    //     <tr>\n                    //         <td rowSpan=\"2\">{k}</td>\n                    //         {/* <td rowSpan=\"2\">{values[k]}</td> */}\n                    //     </tr>\n                    // );\n\n                }\n                var subTempObj = values[k]\n                var size = Object.keys(subTempObj).length\n\n                if (values[k].value) {\n                    count.push(1)\n                    rowPush.push(\n                        <>\n                            {values[k].value != '' &&\n                                <>\n                                    <td style={{ border: \"1px solid black\", padding: \"10px\" }}> {values[k].value}</td>\n                                    <td style={{ border: \"1px solid black\", padding: \"10px\" }}> {values[k].qty}</td>\n                                </>\n                            }\n                        </>\n                    )\n\n                } else {  // loop through the object to skip 'type' and 'key' keys\n                    Object.keys(subObj).forEach(function (itemKey, index) {\n                        if (typeof subObj[itemKey] == 'object') {\n                            // console.log(\"subobject \", subObj[itemKey]);\n                            pivotTablePlot(subObj[itemKey]); // recursively call   \n                        }\n                    })\n                }\n                console.log(\"count \", count);\n\n            })\n        }\n        pivotTablePlot(tempObj);\n\n        let head = count.map((item, index) => {\n            return (\n                <>\n                    <th>Value</th>\n                    <th>Quantity</th>\n                </>\n            )\n        })\n\n        return (\n            <>  <h4>Mission Pivot f table</h4>\n                <table border=\"1\" style={{ borderCollapse: \"collapse\", border: \"1px solid black\", width: \"100%\" }}>\n                    <thead>\n                        <tr>\n                            <th style={{ border: \"1px solid black\", height: \"50px\" }}>Customer</th>\n                            {head}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rowPush}\n                    </tbody>\n                </table>\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}