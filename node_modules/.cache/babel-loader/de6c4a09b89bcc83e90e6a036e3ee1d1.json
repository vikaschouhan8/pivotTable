{"ast":null,"code":"var _jsxFileName = \"/home/devu/projects/my-app/src/CustomObjSalesPewrsonDoneButMonthPartiallyDone2Working.jsx\";\nimport React, { Component } from 'react';\nimport { storeProducts } from \"./data\";\nexport default class CustomObjSalesPewrsonDoneButMonthPartiallyDone2Working extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      store: storeProducts.data,\n      tempObjData: '',\n      title: ''\n    };\n    this.textInput = React.createRef();\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    let store = this.state.store;\n    var tempObj = {};\n    var months = []; // document.write(store);\n\n    Object.keys(store).forEach(function (k) {\n      var val = store[k];\n      var customer = val['customer_name'];\n      var month = val['month'];\n      var itemName = val['item_name'];\n      var salesPerson = val['salesperson_name'];\n      if (!tempObj[customer]) tempObj[customer] = {\n        'type': 'row',\n        'key': 'customer_name'\n      };\n      if (!tempObj[customer][month]) tempObj[customer][month] = {\n        'type': 'row',\n        'key': 'month'\n      };\n      if (!tempObj[customer][month][itemName]) tempObj[customer][month][itemName] = {\n        'type': 'column',\n        'key': 'item_name'\n      };\n      if (!tempObj[customer][month][itemName][salesPerson]) tempObj[customer][month][itemName][salesPerson] = {\n        'type': 'column',\n        'key': 'sales_person',\n        'data': {\n          'value': 0,\n          'qty': 0\n        }\n      };\n      tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n      tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n    });\n    console.log(\"result :\", tempObj);\n    var count = [];\n    var rowPush = [];\n    var monthPush = [];\n\n    function pivotTablePlot(values) {\n      // console.log(\"start \",values);\n      Object.keys(values).forEach(function (k) {\n        var subObj = values[k]; // we will get new object from here\n        // console.log(\"k \", values[k])\n\n        var arr = [\"Aug\", \"Sept\", \"Oct\", \"Dec\", \"Jan\", \"Feb\"];\n        var monthsArr = arr.map(i => {\n          return React.createElement(\"td\", {\n            key: i,\n            colSpan: \"2\",\n            style: {\n              textAlign: \"left\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, i);\n        });\n        let salesPerson = arr.map((i, index) => {\n          return React.createElement(React.Fragment, null, React.createElement(\"td\", {\n            colSpan: \"2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, \"Sales person \", index + 1));\n        });\n\n        function customerNameOnly(customerName, mo) {\n          var tempData = values[customerName]; // console.log(\"tempData\", tempData);\n          // console.log(\"need salesperson name : \", tempData); \n\n          var re = /^[A-Z ,]*$/; // Filter Customer name\n\n          if (re.test(customerName)) {\n            var td = [];\n            var sales_person_name = [];\n            rowPush.push(React.createElement(React.Fragment, null, React.createElement(\"tr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 80\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              rowSpan: \"2\",\n              style: {\n                border: \"1px solid black\",\n                fontWeight: \"bolder\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81\n              },\n              __self: this\n            }, customerName)), React.createElement(\"tr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85\n              },\n              __self: this\n            }, typeof tempData === \"object\" && Object.keys(tempData).forEach(function (monthNameKey) {\n              if (monthNameKey !== \"type\" && monthNameKey !== \"key\") {\n                // td.push(monthNameKey)\n                {\n                  typeof tempData[monthNameKey] === \"object\" && Object.keys(tempData[monthNameKey]).forEach(function (saleP) {\n                    let x = tempData[monthNameKey][saleP];\n\n                    if (x !== \"row\" && x !== \"month\") {\n                      // console.log(\"hereee\");\n                      // console.log(\"tempData[monthNameKey][saleP] \", x);\n                      let tdSalesPerson = [];\n                      Object.keys(x).forEach(function (sales_person) {\n                        if (sales_person !== \"type\" && sales_person !== \"key\") {\n                          // console.log(\"sale person \", sales_person);\n                          tdSalesPerson.push(sales_person);\n                          console.log(\"month name key\", monthNameKey);\n                          console.log(\"sales person n\", sales_person);\n                        } // console.log(\"herx : \", x)\n                        // console.log(\"here : \", sales_person)\n\n                      });\n                      td[monthNameKey] = [tdSalesPerson];\n                    }\n                  });\n                }\n              }\n            }), console.log(\"td array\", td), td.map((item, i) => {\n              return React.createElement(React.Fragment, null, React.createElement(\"tr\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 123\n                },\n                __self: this\n              }, React.createElement(\"td\", {\n                rowSpan: -i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 124\n                },\n                __self: this\n              }, \"e \", monthName)));\n            }))));\n          }\n        }\n\n        customerNameOnly(k, monthsArr);\n\n        if (values[k].value) {\n          rowPush.push(React.createElement(React.Fragment, null, values[k].value !== '' && React.createElement(React.Fragment, null)));\n        } else {\n          // loop through the object to skip 'type' and 'key' keys\n          Object.keys(subObj).forEach(function (itemKey, index) {\n            if (typeof subObj[itemKey] === 'object') {\n              pivotTablePlot(subObj[itemKey]); // recursively call  \n            }\n          });\n        }\n      });\n    }\n\n    pivotTablePlot(tempObj);\n    let monthName = [];\n    let sales_person = [];\n\n    for (let index = 0; index < 4; index++) {\n      monthName.push(React.createElement(\"td\", {\n        colSpan: index + 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Month \", index + 1));\n      sales_person.push(React.createElement(\"td\", {\n        colSpan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Sales person \", index + 1));\n    }\n\n    let valQty = [];\n\n    for (let index = 0; index < 10; index++) {\n      valQty.push(React.createElement(React.Fragment, null, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Value\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Quantity\")));\n    }\n\n    return React.createElement(React.Fragment, null, \"  \", React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Mission Pivot table\"), React.createElement(\"table\", {\n      border: \"1\",\n      style: {\n        borderCollapse: \"collapse\",\n        border: \"1px solid black\",\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      style: {\n        fontSize: \"18px\",\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      rowSpan: \"3\",\n      style: {\n        color: \"#fff\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"customer_name\"), monthName), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, sales_person, sales_person), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, valQty)), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, rowPush)));\n  }\n\n}","map":{"version":3,"sources":["/home/devu/projects/my-app/src/CustomObjSalesPewrsonDoneButMonthPartiallyDone2Working.jsx"],"names":["React","Component","storeProducts","CustomObjSalesPewrsonDoneButMonthPartiallyDone2Working","constructor","props","state","store","data","tempObjData","title","textInput","createRef","myRef","render","tempObj","months","Object","keys","forEach","k","val","customer","month","itemName","salesPerson","console","log","count","rowPush","monthPush","pivotTablePlot","values","subObj","arr","monthsArr","map","i","textAlign","index","customerNameOnly","customerName","mo","tempData","re","test","td","sales_person_name","push","border","fontWeight","monthNameKey","saleP","x","tdSalesPerson","sales_person","item","monthName","value","itemKey","valQty","borderCollapse","width","fontSize","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { storeProducts } from \"./data\"\n\nexport default class CustomObjSalesPewrsonDoneButMonthPartiallyDone2Working extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            store: storeProducts.data,\n            tempObjData: '',\n            title: ''\n        }\n\n        this.textInput = React.createRef();\n        this.myRef = React.createRef();\n    }\n\n    render() {\n        let store = this.state.store;\n        var tempObj = {};\n        var months = []\n        // document.write(store);\n\n        Object.keys(store).forEach(function (k) {\n            var val = store[k];\n            var customer = val['customer_name'];\n            var month = val['month'];\n            var itemName = val['item_name']\n            var salesPerson = val['salesperson_name']\n\n            if (!tempObj[customer])\n                tempObj[customer] = { 'type': 'row', 'key': 'customer_name' };\n\n            if (!tempObj[customer][month])\n                tempObj[customer][month] = { 'type': 'row', 'key': 'month' }\n\n            if (!tempObj[customer][month][itemName])\n                tempObj[customer][month][itemName] = { 'type': 'column', 'key': 'item_name' }\n\n            if (!tempObj[customer][month][itemName][salesPerson])\n                tempObj[customer][month][itemName][salesPerson] = { 'type': 'column', 'key': 'sales_person', 'data': { 'value': 0, 'qty': 0 } }\n\n            tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n            tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n\n        });\n\n        console.log(\"result :\", tempObj);\n        var count = []\n        var rowPush = []\n        var monthPush = []\n        function pivotTablePlot(values) {\n            // console.log(\"start \",values);\n            Object.keys(values).forEach(function (k) {\n                var subObj = values[k] // we will get new object from here\n                // console.log(\"k \", values[k])\n                var arr = [\"Aug\", \"Sept\", \"Oct\", \"Dec\", \"Jan\", \"Feb\"]\n                var monthsArr = arr.map(i => {\n                    return (\n                        <td key={i} colSpan=\"2\" style={{ textAlign: \"left\" }}>{i}</td>\n                    )\n                })\n                let salesPerson = arr.map((i, index) => {\n                    return (\n                        <>\n                            <td colSpan=\"2\">Sales person {index + 1}</td>\n                        </>\n                    )\n                })\n                function customerNameOnly(customerName, mo) {\n                    var tempData = values[customerName]\n                    // console.log(\"tempData\", tempData);\n\n                    // console.log(\"need salesperson name : \", tempData); \n                    var re = /^[A-Z ,]*$/; // Filter Customer name\n                    if (re.test(customerName)) {\n                        var td = []\n                        var sales_person_name = []\n                        rowPush.push(\n                            <>\n                                <tr>\n                                    <td rowSpan=\"2\" style={{ border: \"1px solid black\", fontWeight: \"bolder\" }}>\n                                        {customerName}\n                                    </td>\n                                </tr>\n                                <tr>\n                                    {/* <td>sale person</td> */}\n                                    {/* Need to dynamically set colSpan for Sale person logically */}\n                                    {typeof tempData === \"object\" && Object.keys(tempData).forEach(function (monthNameKey) {\n                                        if (monthNameKey !== \"type\" && monthNameKey !== \"key\") {\n                                            // td.push(monthNameKey)\n                                            {\n                                            typeof tempData[monthNameKey] === \"object\" &&\n                                                Object.keys(tempData[monthNameKey]).forEach(function (saleP) {\n                                                    let x = tempData[monthNameKey][saleP]\n                                                    if (x !== \"row\" && x !== \"month\") {\n                                                        // console.log(\"hereee\");\n                                                        // console.log(\"tempData[monthNameKey][saleP] \", x);\n                                                        let tdSalesPerson = []\n                                                        Object.keys(x).forEach(function (sales_person) {\n                                                            if (sales_person !== \"type\" && sales_person !== \"key\") {\n                                                                // console.log(\"sale person \", sales_person);\n                                                                tdSalesPerson.push(sales_person)\n                                                                console.log(\"month name key\",monthNameKey)\n                                                                console.log(\"sales person n\",sales_person)\n                                                            }\n                                                            // console.log(\"herx : \", x)\n                                                            // console.log(\"here : \", sales_person)\n                                                        })\n                                                        td[monthNameKey] = [tdSalesPerson];\n                                                    }\n                                                })\n                                            }\n                                        }\n                                    })}\n                                    {\n                                    console.log(\"td array\", td)\n\n                                    }\n                                    {                                \n                                    td.map((item,i) => {\n                                        return (\n                                            <>\n                                            <tr>\n                                                <td rowSpan={-i}>e {monthName}</td>\n                                                {/* {\n                                                    [...monthName].map((item, ii)=>{\n                                                        return(\n                                                            <>\n                                                                <td> i {item}</td>\n                                                            </>\n                                                        )\n                                                    })\n                                                } */}\n                                            </tr>\n                                            </>\n                                        )\n                                            \n                                    })}\n                                    {/* <td>{sales_person_name}</td> */}\n                                </tr>\n                            </>\n                        )\n                    }\n                }\n                customerNameOnly(k, monthsArr);\n                if (values[k].value) {\n                    rowPush.push(\n                        <>\n                            {values[k].value !== '' &&\n                                <>  \n                                    {/* <td style={{ border: \"1px solid black\", padding: \"10px\" }}> {values[k].value}</td>\n                                    <td style={{ border: \"1px solid black\", padding: \"10px\" }}> {values[k].qty}</td> */}\n                                </>\n                            }\n                        </>\n                    )\n                } else {  // loop through the object to skip 'type' and 'key' keys\n                    Object.keys(subObj).forEach(function (itemKey, index) {\n                        if (typeof subObj[itemKey] === 'object') {\n                            pivotTablePlot(subObj[itemKey]); // recursively call  \n                        }\n                    })\n                }\n            })\n        }\n        pivotTablePlot(tempObj);\n\n        let monthName = []\n        let sales_person = []\n        for (let index = 0; index < 4; index++) {\n            monthName.push(<td colSpan={index + 4}>Month {index + 1}</td>)\n            sales_person.push(<td colSpan=\"2\">Sales person {index + 1}</td>)\n        }\n\n        let valQty = []\n        for (let index = 0; index < 10; index++) {\n            valQty.push(\n                <>\n                    <td>Value</td>\n                    <td>Quantity</td>\n                </>)\n        }\n        return (\n            <>  <h4>Mission Pivot table</h4>\n                <table border=\"1\" style={{ borderCollapse: \"collapse\", border: \"1px solid black\", width: \"100%\" }}>\n                    <thead style={{ fontSize: \"18px\", fontWeight: \"bold\" }}>\n                        <tr>\n                            <td rowSpan=\"3\" style={{ color: \"#fff\" }}>customer_name</td>\n                            {monthName}\n                        </tr>\n                        <tr>\n                            {sales_person}\n                            {sales_person}\n                        </tr>\n                        <tr>\n                            {valQty}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rowPush}\n                    </tbody>\n                </table>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}