{"ast":null,"code":"var _jsxFileName = \"/home/devu/projects/my-app/src/CustomObj.js\";\nimport React, { Component } from 'react';\nimport { storeProducts } from \"./data\";\nexport default class CustomObjLast extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      store: storeProducts.data,\n      tempObjData: '',\n      title: ''\n    };\n    this.textInput = React.createRef();\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    let store = this.state.store;\n    var tempObj = {};\n    var months = []; // document.write(store);\n\n    Object.keys(store).forEach(function (k) {\n      var val = store[k];\n      var customer = val['customer_name'];\n      var month = val['month'];\n      var itemName = val['item_name'];\n      var salesPerson = val['salesperson_name'];\n      if (!tempObj[customer]) tempObj[customer] = {\n        'type': 'row',\n        'key': 'customer_name'\n      };\n      if (!tempObj[customer][month]) tempObj[customer][month] = {\n        'type': 'row',\n        'key': 'month'\n      };\n      if (!tempObj[customer][month][itemName]) tempObj[customer][month][itemName] = {\n        'type': 'column',\n        'key': 'item_name'\n      };\n      if (!tempObj[customer][month][itemName][salesPerson]) tempObj[customer][month][itemName][salesPerson] = {\n        'type': 'column',\n        'key': 'sales_person',\n        'data': {\n          'value': 0,\n          'qty': 0\n        }\n      };\n      tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n      tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n    });\n    console.log(\"result :\", tempObj);\n    var count = [];\n    var rowPush = [];\n\n    function pivotTablePlot(values) {\n      // console.log(\"start \",values);\n      Object.keys(values).forEach(function (k) {\n        var subObj = values[k]; // we will get new object from here\n        // console.log(\"k \", values[k])\n\n        var arr = [\"Aug\", \"Sept\", \"Oct\", \"Dec\", \"Jan\", \"Feb\"];\n        var monthsArr = arr.map(i => {\n          return React.createElement(\"td\", {\n            key: i,\n            colSpan: \"2\",\n            style: {\n              textAlign: \"left\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, i);\n        });\n        let salesPerson = arr.map((i, index) => {\n          return React.createElement(React.Fragment, null, React.createElement(\"td\", {\n            colSpan: \"2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, \"Sales person \", index + 1));\n        });\n        let valQty = arr.map(i => {\n          return React.createElement(React.Fragment, null, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, \"Value\"), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, \"Quantity\"));\n        });\n\n        function customerNameOnly(v, mo) {\n          Object.keys(values[v]).forEach((key, index) => {\n            months.push(key);\n          });\n          var tempData = values[v];\n          var re = /^[A-Z ,]*$/; // Filter Customer name\n\n          if (re.test(v)) {\n            rowPush.push(React.createElement(React.Fragment, null, React.createElement(\"tr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              rowSpan: \"3\",\n              style: {\n                border: \"1px solid black\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 86\n              },\n              __self: this\n            }, k), React.createElement(\"td\", {\n              colSpan: \"2\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87\n              },\n              __self: this\n            }, \"Month(Should be dynamically span, [colSpan:2]) \")), React.createElement(\"tr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 97\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108\n              },\n              __self: this\n            }, \"22\"), React.createElement(\"td\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 109\n              },\n              __self: this\n            }, \"23\"), React.createElement(\"td\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110\n              },\n              __self: this\n            }, \"24\")), React.createElement(\"tr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 112\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 114\n              },\n              __self: this\n            }, \"31\"), React.createElement(\"td\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 115\n              },\n              __self: this\n            }, \"32\"), React.createElement(\"td\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116\n              },\n              __self: this\n            }, \"33\"))));\n          }\n        }\n\n        customerNameOnly(k, monthsArr);\n\n        if (values[k].value) {\n          count.push(1);\n          rowPush.push(React.createElement(React.Fragment, null)); // }\n        } else {\n          // loop through the object to skip 'type' and 'key' keys\n          Object.keys(subObj).forEach(function (itemKey, index) {\n            if (typeof subObj[itemKey] === 'object') {\n              // console.log(\"subobject \", subObj[itemKey]);\n              // console.log(\"A\");\n              pivotTablePlot(subObj[itemKey]); // recursively call  \n              // console.log(\"B\");\n            }\n          });\n        }\n      });\n    }\n\n    pivotTablePlot(tempObj);\n    var monthFliterd = months.filter(function (number) {\n      if (isNaN(number) && number !== \"type\" && number !== \"value\" && number !== \"qty\" && number !== \"column\" && number !== \" NULL\" && number !== \"key\") {\n        return number;\n      }\n    });\n    let head = count.map((item, index) => {\n      return React.createElement(React.Fragment, null, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Value\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Quantity\"));\n    });\n    return React.createElement(React.Fragment, null, \"  \", React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Mission Pivot table\"), React.createElement(\"table\", {\n      border: \"1\",\n      style: {\n        borderCollapse: \"collapse\",\n        border: \"1px solid black\",\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      rowSpan: \"3\",\n      style: {\n        border: \"1px solid black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Customer\"), React.createElement(\"td\", {\n      colSpan: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Month(Should be dynamically span, [colSpan:2]) \")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"22\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"23\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"24\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"31\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"32\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"33\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, rowPush)));\n  }\n\n}","map":{"version":3,"sources":["/home/devu/projects/my-app/src/CustomObj.js"],"names":["React","Component","storeProducts","CustomObjLast","constructor","props","state","store","data","tempObjData","title","textInput","createRef","myRef","render","tempObj","months","Object","keys","forEach","k","val","customer","month","itemName","salesPerson","console","log","count","rowPush","pivotTablePlot","values","subObj","arr","monthsArr","map","i","textAlign","index","valQty","customerNameOnly","v","mo","key","push","tempData","re","test","border","value","itemKey","monthFliterd","filter","number","isNaN","head","item","borderCollapse","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { storeProducts } from \"./data\"\n\nexport default class CustomObjLast extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            store: storeProducts.data,\n            tempObjData: '',\n            title: ''\n        }\n\n        this.textInput = React.createRef();\n        this.myRef = React.createRef();\n    }\n\n    render() {\n        let store = this.state.store;\n        var tempObj = {};\n        var months = []\n        // document.write(store);\n\n        Object.keys(store).forEach(function (k) {\n            var val = store[k];\n            var customer = val['customer_name'];\n            var month = val['month'];\n            var itemName = val['item_name']\n            var salesPerson = val['salesperson_name']\n\n            if (!tempObj[customer])\n                tempObj[customer] = { 'type': 'row', 'key': 'customer_name' };\n\n            if (!tempObj[customer][month])\n                tempObj[customer][month] = { 'type': 'row', 'key': 'month' }\n\n            if (!tempObj[customer][month][itemName])\n                tempObj[customer][month][itemName] = { 'type': 'column', 'key': 'item_name' }\n\n            if (!tempObj[customer][month][itemName][salesPerson])\n                tempObj[customer][month][itemName][salesPerson] = { 'type': 'column', 'key': 'sales_person', 'data': { 'value': 0, 'qty': 0 } }\n\n            tempObj[customer][month][itemName][salesPerson]['data']['value'] = val['taxpaidamount'];\n            tempObj[customer][month][itemName][salesPerson]['data']['qty'] = val['qty'];\n\n        });\n\n        console.log(\"result :\", tempObj);\n        var count = []\n        var rowPush = []\n        function pivotTablePlot(values) {\n            // console.log(\"start \",values);\n            Object.keys(values).forEach(function (k) {\n                var subObj = values[k] // we will get new object from here\n                // console.log(\"k \", values[k])\n                var arr = [\"Aug\", \"Sept\", \"Oct\", \"Dec\", \"Jan\", \"Feb\"]\n                var monthsArr = arr.map(i => {\n                    return (\n                        <td key={i} colSpan=\"2\" style={{ textAlign: \"left\" }}>{i}</td>\n                    )\n                })\n                let salesPerson = arr.map((i, index) => {\n                    return (\n                        <>\n                            <td colSpan=\"2\">Sales person {index + 1}</td>\n                        </>\n                    )\n                })\n                let valQty = arr.map(i => {\n                    return (\n                        <>\n                            <td>Value</td>\n                            <td>Quantity</td>\n                        </>\n                    )\n                })\n                function customerNameOnly(v, mo) {\n                    Object.keys(values[v]).forEach((key, index) => {\n                        months.push(key)\n                    })\n                    var tempData = values[v]\n                    var re = /^[A-Z ,]*$/; // Filter Customer name\n                    if (re.test(v)) {\n                        rowPush.push(\n                            <>\n                                <tr>\n                                    <td rowSpan=\"3\" style={{ border: \"1px solid black\" }}>{k}</td>\n                                    <td colSpan=\"2\">Month(Should be dynamically span, [colSpan:2]) </td>\n                                    {/* <td>13</td>\n                                    <td>14</td> */}\n                                    {/* {typeof tempData === \"object\" && Object.keys(tempData).forEach(function (monthNameKey) {\n                                        if (monthNameKey !== \"type\" && monthNameKey !== \"key\") {\n                                            rowPush.push(\n                                                <td style={{ textAlign: \"left\" }}>{monthNameKey}</td>)\n                                        }\n                                    })} */}\n                                </tr>\n                                <tr>\n                                    {/* {typeof tempData === \"object\" && Object.keys(tempData).forEach(function (monthNameKey) {\n                                        if (monthNameKey !== \"type\" && monthNameKey !== \"key\") {\n                                            rowPush.push(\n                                                <td style={{ textAlign: \"left\" }}>{monthNameKey}</td>)\n                                        }\n                                    })} */}\n                                    {/* \n                                    {valQty}\n                                     */}\n                                    {/* <td>1</td> */}\n                                    <td>22</td>\n                                    <td>23</td>\n                                    <td>24</td>\n                                </tr>\n                                <tr>\n                                    {/* <td></td> */}\n                                    <td>31</td>\n                                    <td>32</td>\n                                    <td>33</td>\n                                </tr>\n                            </>\n                        )\n                    }\n                }\n                customerNameOnly(k, monthsArr);\n\n                if (values[k].value) {\n                    count.push(1)\n                    rowPush.push(\n                        <>\n                            {/* {values[k].value !== '' &&\n                                <>\n                                    <td style={{ border: \"1px solid black\", padding: \"10px\" }}> {values[k].value}</td>\n                                    <td style={{ border: \"1px solid black\", padding: \"10px\" }}> {values[k].qty}</td>\n                                </>\n                            } */}\n                        </>\n                    )\n                    // }\n                } else {  // loop through the object to skip 'type' and 'key' keys\n                    Object.keys(subObj).forEach(function (itemKey, index) {\n                        if (typeof subObj[itemKey] === 'object') {\n                            // console.log(\"subobject \", subObj[itemKey]);\n                            // console.log(\"A\");\n                            pivotTablePlot(subObj[itemKey]); // recursively call  \n                            // console.log(\"B\");\n\n                        }\n                    })\n                }\n            })\n        }\n        pivotTablePlot(tempObj);\n        var monthFliterd = months.filter(function (number) {\n            if (isNaN(number) && number !== \"type\" && number !== \"value\" && number !== \"qty\" && number !== \"column\" && number !== \" NULL\" && number !== \"key\") {\n                return number\n            }\n        });\n        let head = count.map((item, index) => {\n            return (\n                <>\n                    <th>Value</th>\n                    <th>Quantity</th>\n                </>\n            )\n        })\n        return (\n            <>  <h4>Mission Pivot table</h4>\n                <table border=\"1\" style={{ borderCollapse: \"collapse\", border: \"1px solid black\", width: \"100%\" }}>\n                    <thead>\n                        <tr>\n                            <td rowSpan=\"3\" style={{ border: \"1px solid black\" }}>Customer</td>\n                            <td colSpan=\"2\">Month(Should be dynamically span, [colSpan:2]) </td>\n                        </tr>\n                        <tr>\n\n                            <td>22</td>\n                            <td>23</td>\n                            <td>24</td>\n                        </tr>\n                        <tr>\n                            <td>31</td>\n                            <td>32</td>\n                            <td>33</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rowPush}\n                    </tbody>\n                </table>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}